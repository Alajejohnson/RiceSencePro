import React, { useEffect } from "react";
import { View, Text, ActivityIndicator, StyleSheet, Image, SafeAreaView } from "react-native";
import * as SplashScreen from "expo-splash-screen";
import { router } from "expo-router";

SplashScreen.preventAutoHideAsync(); // Prevent splash from hiding immediately

export default function SplashScreenComponent() {
  useEffect(() => {
    setTimeout(() => {
      SplashScreen.hideAsync(); // Hide the splash screen
      router.replace("/"); // Navigate to Welcome Screen
    }, 3000); // Show splash for 3 seconds
  }, []);

  return (
    <SafeAreaView style={{flex: 1}}>
    <View style={styles.container}>
      <Image source={require("../../assets/RiceSence.png")} style={{ width: 240, height: 100 }} />
      <ActivityIndicator size="large" color = "orange" /> 
    </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "white",
  }
});





------------------------------------------------pest-------------------------------------------------

import React, { useState } from "react";
import { View, Text, Button, SafeAreaView, StyleSheet, TouchableOpacity } from "react-native";
import { Colors } from "@/constants/Colors";
import { Picker } from "@react-native-picker/picker";

const riceFertilizerData = {
  loamy: {
    seedling: "Use organic manure or Urea (46-0-0) lightly.",
    tillering: "Apply NPK 20-10-10 for shoot development.",
    panicle: "Use Phosphorus-rich fertilizers (10-20-20).",
    grain_filling: "Apply Potassium-based fertilizers (0-0-50).",
  },
  sandy: {
    seedling: "Increase organic compost before planting.",
    tillering: "Use slow-release NPK 15-15-15 fertilizer.",
    panicle: "Add Phosphorus (10-20-20) to improve root growth.",
    grain_filling: "Apply Potassium-based fertilizer (0-0-50).",
  },
  clay: {
    seedling: "Use compost or well-decomposed manure.",
    tillering: "Use balanced NPK 20-10-10 fertilizer.",
    panicle: "Add Phosphorus for flowering.",
    grain_filling: "Use Potassium-based fertilizer (0-0-50).",
  },
};

const Fertilizer = () => {
  const [soilType, setSoilType] = useState("loamy");
  const [cropStage, setCropStage] = useState("seedling");
  const [recommendation, setRecommendation] = useState("");

  const getFertilizerRecommendation = () => {
    const result = riceFertilizerData[soilType]?.[cropStage] || "No recommendation available.";
    setRecommendation(result);
  };

  return (
    // <SafeAreaView>
    <View style={styles.Container}>
      <Text style={{ fontSize: 18, fontWeight: "bold", marginBottom: 20 }}>
        Select Soil Type:
      </Text>
      <Picker selectedValue={soilType} onValueChange={(itemValue) => setSoilType(itemValue)} style={styles.picker}>
        <Picker.Item label="Loamy Soil" value="loamy" />
        <Picker.Item label="Sandy Soil" value="sandy" />
        <Picker.Item label="Clay Soil" value="clay" />
      </Picker>

      <Text style={{ fontSize: 18, fontWeight: "bold", marginTop: 20, marginBottom: 10 }}>
        Select Rice Growth Stage:
      </Text>
      <Picker selectedValue={cropStage} onValueChange={(itemValue) => setCropStage(itemValue)} style={styles.picker}>
        <Picker.Item label="Seedling Stage" value="seedling" />
        <Picker.Item label="Tillering Stage" value="tillering" />
        <Picker.Item label="Panicle Initiation" value="panicle" />
        <Picker.Item label="Grain Filling Stage" value="grain_filling" />
      </Picker>

      {/* <Button title="Get Recommendation" onPress={getFertilizerRecommendation} style={{backgroundColor: Colors.secondary, bors}} /> */}
      <TouchableOpacity onPress={getFertilizerRecommendation} style={styles.btn}>
        <Text style={{textAlign: "center", color: Colors.white, fontSize: 18}}>Get Recommendation</Text>
      </TouchableOpacity>

      {recommendation ? (
        <Text style={{ marginTop: 20, fontSize: 16, fontWeight: "bold", color: Colors.primary }}>
          {recommendation}
        </Text>
      ) : null}
    </View>
    // </SafeAreaView>
  );
};

const styles = StyleSheet.create({
    Container: {
        justifyContent: "center",
        padding: 20,
        backgroundColor: Colors.white,
        height: "100%"
        
    },
    btn: {
        backgroundColor: Colors.secondary,
        padding: 10,
        borderRadius: 20,
        marginTop: 20,
    },
    picker: {
        fontSize: 16,
        padding: 10,

    }
});

export default Fertilizer;

----------------------------------------------------------

import { Colors } from "@/constants/Colors";
import React, { useState } from "react";
import { View, Text, TextInput, TouchableOpacity, SafeAreaView, StyleSheet, Alert } from "react-native";
import AsyncStorage from '@react-native-async-storage/async-storage';

export default function RegisterScreen({navigation}) {
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [password, setPassword] = useState("");


  const handleSignUp = async () => {
    if (!firstName || !lastName || !email || !phone) {
      Alert.alert("Error", "All fields are required.");
      return;
    }

    const userId = `user_${Date.now()}`;
    const userData = {
      userId,
      firstName,
      lastName,
      email,
      phone,
      createdAt: new Date().toISOString(),
    };

    try {
      await AsyncStorage.setItem("userData", JSON.stringify(userData));
      Alert.alert("Success", "Registration complete!");
      navigation.navigate("Login");
    } catch (error) {
      Alert.alert("Storage Error", "Could not save user data.");
    }
  };

  return (
    <SafeAreaView style={{ flex: 1, backgroundColor: Colors.white }}>
      <View style={styles.circleTop} />
      <View style={styles.circleBottom} />
      <View style={{ flex: 1, justifyContent: "center", padding: 20 }}>
        <Text style={{ fontSize: 24, fontWeight: "bold", marginBottom: 20 }}>Sign Up</Text>

        <Text>First Name</Text>
        <TextInput style={styles.btn} placeholder="First Name" value={firstName} onChangeText={setFirstName} />

        <Text>Last Name</Text>
        <TextInput style={styles.btn} placeholder="Last Name" value={lastName} onChangeText={setLastName} />

        <Text>Email Address</Text>
        <TextInput style={styles.btn} placeholder="Email Address" value={email} onChangeText={setEmail} />

        <Text>Phone Number</Text>
        <TextInput style={styles.btn} placeholder="Phone Number" value={phone} onChangeText={setPhone} />

        <Text>Password</Text>
        <TextInput style={styles.btn} placeholder="Password" secureTextEntry value={password} onChangeText={setPassword} />

        <TouchableOpacity onPress={handleSignUp} style={styles.signUpButton}>
          <Text style={styles.signUpText}>Sign Up</Text>
        </TouchableOpacity>

        <TouchableOpacity onPress={() => navigation.navigate("Login")}>
          <Text style={{ marginTop: 10, textAlign: "center" }}>
            Already have an account? <Text style={{ color: Colors.primary }}>Sign In</Text>
          </Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  btn: {
    borderWidth: 1,
    borderColor: Colors.ash1,
    padding: 10,
    borderRadius: 5,
    marginBottom: 10,
    marginTop: 3,
    backgroundColor: Colors.ash2,
  },
  signUpButton: {
    backgroundColor: Colors.secondary,
    padding: 15,
    borderRadius: 25,
    alignItems: "center",
    marginTop: 10,
  },
  signUpText: {
    color: Colors.white,
    fontWeight: "bold",
  },
  circleTop: {
    backgroundColor: Colors.primary,
    height: 180,
    width: 180,
    borderRadius: 90,
    position: "absolute",
    top: "-10%",
    left: "70%",
  },
  circleBottom: {
    backgroundColor: Colors.primary,
    height: 180,
    width: 180,
    borderRadius: 90,
    position: "absolute",
    bottom: "-10%",
    right: "70%",
  },
});


---------------------------------------------login---------------------------------------
import { Colors } from "@/constants/Colors";
import React, { useState } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  SafeAreaView,
  StyleSheet,
  Switch,
  Alert,
} from "react-native";
import AsyncStorage from "@react-native-async-storage/async-storage";

import { database } from "../FirebaseConfig";
import { ref, get, child } from "firebase/database";

export const unstable_settings = {
  ssr: false,
};

export default function LoginScreen({ navigation }) {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState(null);
  const [showReset, setShowReset] = useState(false);
  const [rememberMe, setRememberMe] = useState(false);

  // Simulated login with Firebase Realtime DB
const handleLogin = async () => {
  if (!email || !password) {
    setError("Please enter both email and password.");
    return;
  }

  try {
    const dbRef = ref(database);
    const snapshot = await get(child(dbRef, "users"));

    if (snapshot.exists()) {
      const users = snapshot.val();
      const foundUser = Object.entries(users).find(
        ([, value]) => value.email === email && value.password === password
      );

      if (foundUser) {
        const [uid, userData] = foundUser;

        if (rememberMe) {
          await AsyncStorage.setItem("userEmail", userData.email);
          await AsyncStorage.setItem(
            "userName",
            userData.firstName + " " + userData.lastName
          );
          await AsyncStorage.setItem("userId", uid);
        }

        setError(null);
        setShowReset(false);
        navigation.replace("Menu");
        return;
      }
    }

    setError("Invalid credentials. Please check your email or password.");
    setShowReset(true);
  } catch (err) {
    setError("Login failed. Please try again.");
    console.log("Login error:", err);
  }
};



  // Optional reset password UI message only
  const handleResetPassword = () => {
    if (!email) {
      setError("Enter your email address to reset password.");
    } else {
      Alert.alert("Note", "Password reset not available. Contact admin.");
    }
  };

  return (
    <SafeAreaView style={{ flex: 1, backgroundColor: Colors.white }}>
      <View
        style={{
          backgroundColor: Colors.primary,
          height: 180,
          width: 180,
          borderRadius: 90,
          position: "absolute",
          top: "-10%",
          left: "70%",
        }}
      />
      <View
        style={{
          backgroundColor: Colors.primary,
          height: 180,
          width: 180,
          borderRadius: 90,
          position: "absolute",
          bottom: "-10%",
          right: "70%",
        }}
      />

      <View style={{ flex: 1, justifyContent: "center", padding: 20 }}>
        <Text style={{ fontSize: 24, fontWeight: "bold", marginBottom: 20 }}>
          Sign In
        </Text>

        <TextInput
          placeholder="Email"
          value={email}
          onChangeText={setEmail}
          style={styles.btn}
        />

        <TextInput
          placeholder="Password"
          value={password}
          onChangeText={setPassword}
          secureTextEntry
          style={styles.btn}
        />

        {/* Remember Me Toggle */}
        <View
          style={{
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "center",
            marginBottom: 10,
          }}
        >
          <Switch
            value={rememberMe}
            onValueChange={setRememberMe}
            thumbColor={Colors.primary}
          />
          <Text style={{ marginLeft: 10 }}>Remember Me</Text>
        </View>

        {/* Show error */}
        {error && (
          <Text style={{ color: Colors.secondary, marginBottom: 10 }}>
            {error}
          </Text>
        )}

        <TouchableOpacity
          onPress={handleLogin}
          style={{
            backgroundColor: Colors.secondary,
            padding: 15,
            borderRadius: 25,
            alignItems: "center",
            marginTop: 10,
          }}
        >
          <Text style={{ color: "white", textAlign: "center" }}>Sign In</Text>
        </TouchableOpacity>

        {/* Show Reset Password if login failed */}
        {showReset && (
          <TouchableOpacity onPress={handleResetPassword}>
            <Text
              style={{
                marginTop: 10,
                textAlign: "center",
                color: Colors.primary,
                fontWeight: "bold",
              }}
            >
              Forgot Password?
            </Text>
          </TouchableOpacity>
        )}

        <TouchableOpacity onPress={() => navigation.navigate("Register")}>
          <Text style={{ textAlign: "center", marginTop: 10 }}>
            New User? <Text style={{ color: Colors.primary }}>Sign Up </Text>
          </Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  btn: {
    borderWidth: 1,
    borderColor: Colors.ash1,
    padding: 10,
    borderRadius: 5,
    marginBottom: 10,
    marginTop: 3,
    backgroundColor: Colors.ash2,
  },
});
















--------------------------------------------------pest latest---------------------
import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  TouchableOpacity,
  SafeAreaView,
  Image,
  StyleSheet,
  Alert,
  ActivityIndicator,
} from "react-native";
import * as ImagePicker from "expo-image-picker";
import { ref, push } from "firebase/database";
import * as ImageManipulator from "expo-image-manipulator";
import { database } from "@/FirebaseConfig";
import { Colors } from "@/constants/Colors";
import AsyncStorage from "@react-native-async-storage/async-storage";

const Pest = () => {
  const [image, setImage] = useState(null);
  const [uploading, setUploading] = useState(false);
  const [detectionResult, setDetectionResult] = useState(null);

  useEffect(() => {
    const debugUserData = async () => {
      const data = await AsyncStorage.getItem("userData");
      console.log("UserData from AsyncStorage:", data);
    };
    debugUserData();
  }, []);

  const getCurrentUser = async () => {
    try {
      const userData = await AsyncStorage.getItem("userData");
      return userData ? JSON.parse(userData) : null;
    } catch (err) {
      console.error("Error reading user data:", err);
      return null;
    }
  };

  const uploadImageToCloudinary = async (imageUri) => {
    const formData = new FormData();
    formData.append("file", {
      uri: imageUri,
      type: "image/jpeg",
      name: "photo.jpg",
    });
    formData.append("upload_preset", "unsigned_preset");

    try {
      const res = await fetch(
        "https://api.cloudinary.com/v1_1/dmu3xqmax/image/upload",
        {
          method: "POST",
          body: formData,
        }
      );
      const data = await res.json();
      console.log("Upload success:", data);
      return data.secure_url;
    } catch (error) {
      console.error("Cloudinary upload failed:", error);
      return null;
    }
  };

  const detectDiseaseWithRoboflow = async (imageUri) => {
    const formData = new FormData();
    formData.append("file", {
      uri: imageUri,
      type: "image/jpeg",
      name: "photo.jpg",
    });

    try {
      const response = await fetch(
        "https://detect.roboflow.com/ricecropdisease/3?api_key=jFWG3CvrZaTABjzVZ7IH",
        {
          method: "POST",
          body: formData,
        }
      );
      const data = await response.json();
      console.log("Roboflow result:", data);
      const detected = data.predictions?.[0]?.class || "No disease detected";
      setDetectionResult(detected);
      return detected;
    } catch (error) {
      console.error("Roboflow detection failed:", error);
      setDetectionResult("Detection failed");
      return null;
    }
  };

  const saveImageUrlToFirebase = async (url, detectedClass) => {
    const user = await getCurrentUser();
    if (!user) {
      console.error("No user found. Can't save.");
      return;
    }

    // const userId = user.userId;
    const userId = await AsyncStorage.getItem('userId');

    const historyRef = ref(database, `users/${userId}/pestHistory`);

    await push(historyRef, {
      imageUrl: url,
      uploadedAt: new Date().toISOString(),
      diagnosis: detectedClass || "Unknown",
    });
  };

  const handleImage = async (result) => {
    if (!result.canceled) {
      let imageUri = result.assets[0].uri;
      console.log("Selected image URI:", imageUri);

      const compressedImage = await ImageManipulator.manipulateAsync(
        imageUri,
        [{ resize: { width: 800 } }],
        { compress: 0.7, format: ImageManipulator.SaveFormat.JPEG }
      );

      imageUri = compressedImage.uri;
      setImage(imageUri);
      setUploading(true);

      const cloudinaryUrl = await uploadImageToCloudinary(imageUri);
      if (cloudinaryUrl) {
        const detectedClass = await detectDiseaseWithRoboflow(imageUri);
        await saveImageUrlToFirebase(cloudinaryUrl, detectedClass);
        Alert.alert("Success", "Image uploaded and saved!");
      } else {
        Alert.alert("Upload Failed", "Could not upload image.");
      }

      setUploading(false);
    }
  };

  const takePicture = async () => {
    try {
      const { status } = await ImagePicker.requestCameraPermissionsAsync();
      console.log("Camera permission status:", status);
      if (status !== "granted") {
        Alert.alert("Permission Required", "Camera access is needed.");
        return;
      }

      const result = await ImagePicker.launchCameraAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [4, 3],
        quality: 1,
      });

      await handleImage(result);
    } catch (err) {
      console.error("Error in takePicture:", err);
      Alert.alert("Error", "Something went wrong when taking picture.");
    }
  };

  const pickImage = async () => {
    try {
      const { status } =
        await ImagePicker.requestMediaLibraryPermissionsAsync();
      console.log("Media library permission status:", status);
      if (status !== "granted") {
        Alert.alert("Permission Required", "Media access is needed.");
        return;
      }

      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaType.Images,
        allowsEditing: true,
        aspect: [4, 3],
        quality: 1,
      });

      await handleImage(result);
    } catch (err) {
      console.error("Error in pickImage:", err);
      Alert.alert("Error", "Something went wrong when picking image.");
    }
  };

  return (
    <SafeAreaView style={{ flex: 1 }}>
      <View style={{ flex: 1, backgroundColor: Colors.white }}>
        <View style={{ marginTop: 20, padding: 15 }}>
          <Text style={styles.healText}>Heal your Crop</Text>
          <View style={styles.healSection}>
            <View
              style={{
                flexDirection: "row",
                justifyContent: "space-around",
                alignItems: "center",
              }}
            >
              <View style={styles.iconBox}>
                <Image source={require("../assets/Image.png")} />
                <Text>Take a picture</Text>
              </View>
              <Image source={require("../assets/Arrow.png")} />
              <View style={styles.iconBox}>
                <Image source={require("../assets/Result.png")} />
                <Text>See diagnosis</Text>
              </View>
              <Image source={require("../assets/Arrow.png")} />
              <View style={styles.iconBox}>
                <Image source={require("../assets/Bottle.png")} />
                <Text>Get Solution</Text>
              </View>
            </View>

            <TouchableOpacity
              style={styles.takePictureButton}
              onPress={takePicture}
            >
              <Text style={styles.buttonText}>Take a picture</Text>
            </TouchableOpacity>

            <Text onPress={pickImage} style={styles.uploadText}>
              Upload from gallery
            </Text>

            {uploading && (
              <ActivityIndicator
                size="large"
                color={Colors.secondary}
                style={{ marginTop: 10 }}
              />
            )}
            {image && (
              <Image source={{ uri: image }} style={styles.imagePreview} />
            )}

            {detectionResult && (
              <Text style={styles.diagnosisText}>
                Diagnosis: {detectionResult}
              </Text>
            )}
          </View>
        </View>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  healText: {
    fontSize: 16,
    marginBottom: 10,
  },
  healSection: {
    backgroundColor: Colors.ash2,
    borderRadius: 10,
    padding: 20,
  },
  iconBox: {
    alignItems: "center",
    margin: 10,
  },
  takePictureButton: {
    marginTop: 10,
    backgroundColor: Colors.secondary,
    padding: 10,
    borderRadius: 25,
    alignItems: "center",
  },
  buttonText: {
    color: Colors.white,
    fontSize: 16,
    fontWeight: "500",
  },
  uploadText: {
    color: Colors.primary,
    fontSize: 12,
    fontWeight: "500",
    textAlign: "center",
    marginTop: 5,
  },
  imagePreview: {
    marginTop: 10,
    width: "100%",
    height: 200,
    borderRadius: 10,
  },
  diagnosisText: {
    textAlign: "center",
    marginTop: 10,
    fontSize: 16,
  },
});

export default Pest;

-------------------------------------------------------------------------------------------

  useEffect(() => {
  registerForPushNotificationsAsync();
}, []);

async function registerForPushNotificationsAsync() {
  if (Device.isDevice) {
    const { status: existingStatus } = await Notifications.getPermissionsAsync();
    let finalStatus = existingStatus;

    if (existingStatus !== 'granted') {
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
    }

    if (finalStatus !== 'granted') {
      Alert.alert('Permission not granted to show notifications!');
      return;
    }
  } else {
    Alert.alert('Must use physical device for Push Notifications');
  }
}



-------------------------------------------------app.json-----------------------------------------------
{
  "expo": {
    "name": "RiceSence",
    "slug": "RiceSence",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/appFavicon.png",
    "scheme": "ricesence",
    "userInterfaceStyle": "automatic",
    "newArchEnabled": true,
    "ios": {
       "googleServicesFile": "./GoogleService-Info.plist",
      "supportsTablet": true
    },
    "android": {
      "googleServicesFile": "./google-services.json",
      "adaptiveIcon": {
        "foregroundImage": "./assets/images/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      },
      "edgeToEdgeEnabled": true
    },
    "web": {
      "bundler": "metro",
      "output": "static",
      "favicon": "./assets/images/favicon.png"
    },
    "plugins": [
      "expo-router",
      [
        "expo-splash-screen",
        {
          "image": "./assets/images/splash-icon.png",
          "imageWidth": 200,
          "resizeMode": "contain",
          "backgroundColor": "#ffffff"
        }
      ],
      [
      "expo-notifications",
        {
          "icon": "./assets/RiceSence.png",
          "color": "#ffffff"
        }
      ]
    ],
    "experiments": {
      "typedRoutes": true
    },
    "notification": {
      "icon": "./assets/RiceSence.png",
      "color": "#ffffff"
    }

  }
}
